name: 'üî• IDE Build'

on:
  push:
    branches:
      - master

  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ${{ matrix.map.os }}
    strategy:
      matrix:
        map: [{os: windows-latest, host: windows, suffix: exe},
              {os: ubuntu-latest, host: linux, suffix: run},
              {os: macos-latest, host: mac, suffix: dmg}]
      fail-fast: false
    steps:
    - name: '‚è≥ Checkout repository'
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: 'üçè Install Apple Certificates'
      if: matrix.map.host == 'mac'
        run: |
          APPLICATION_CERTIFICATE_PATH=$RUNNER_TEMP/application_certificate.p12
          INSTALLER_CERTIFICATE_PATH=$RUNNER_TEMP/installer_certificate.p12
          echo -n "$APPLICATION_CERTIFICATE_BASE64" | base64 --decode -o $APPLICATION_CERTIFICATE_PATH
          echo -n "$INSTALLER_CERTIFICATE_BASE64" | base64 --decode -o $INSTALLER_CERTIFICATE_PATH
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security import $APPLICATION_CERTIFICATE_PATH -P "$APPLICATION_P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $INSTALLER_CERTIFICATE_PATH -P "$INSTALLER_P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          xcrun notarytool store-credentials "AC_PASSWORD" --apple-id "$APPLE_ID" --team-id "$TEAM_ID" --password "$NOTARYTOOL_PASSWORD" --keychain $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

    - name: '‚¨á Install Qt on Windows'
      if: matrix.map.host == 'windows'
      uses: jurplel/install-qt-action@v3
      with:
        aqtversion: '==3.1.*'
        version: '6.5.1'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_mingw'
        dir: 'C:\Users\runneradmin'
        modules: 'qtimageformats qtmultimedia qtserialbus qtserialport qt5compat'
        cache: true
        tools: 'tools_cmake tools_ifw tools_ninja tools_mingw90'

    - name: '‚¨á Install Qt on Linux'
      if: matrix.map.host == 'linux'
      uses: jurplel/install-qt-action@v3
      with:
        aqtversion: '==3.1.*'
        version: '6.5.1'
        host: 'linux'
        target: 'desktop'
        arch: 'gcc_64'
        dir: '/home/runner'
        modules: 'qtimageformats qtmultimedia qtserialbus qtserialport qt5compat'
        cache: true
        tools: 'tools_cmake tools_ifw tools_ninja'

    - name: '‚¨á Install Qt on Mac'
      if: matrix.map.host == 'mac'
      uses: jurplel/install-qt-action@v3
      with:
        aqtversion: '==3.1.*'
        version: '6.5.1'
        host: 'mac'
        target: 'desktop'
        arch: 'clang_64'
        modules: 'qtimageformats qtmultimedia qtserialbus qtserialport qt5compat'
        tools: 'tools_cmake tools_ninja'

    - name: 'üèó Build IDE on Windows'
      if: matrix.map.host == 'windows'
      run: python make.py

    - name: 'üèó Build IDE on Linux'
      if: matrix.map.host == 'linux'
      run: |
        sudo apt-get install -y chrpath
        python make.py
        version=$(ls build | grep -oP 'openmv-ide-linux-x86_64-\K[0-9]+\.[0-9]+\.[0-9]+(?=\.run)')
        cd qt-creator/share/qtcreator
        zip -r ../../../build/openmv-ide-resources-${version}.zip examples firmware html models 

    - name: 'üèó Build IDE on Mac'
      if: matrix.map.host == 'mac'
      run: python make.py

    - name: '‚¨Ü Upload artifacts'
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v3
      with:
        path: 'build/openmv-ide-*.${{ matrix.map.suffix }}'
        if-no-files-found: error
  
    - name: '‚¨Ü Upload resources'
      if: github.event_name != 'pull_request' && matrix.map.host == 'linux'
      uses: actions/upload-artifact@v3
      with:
        path: 'build/openmv-ide-*.zip'
        if-no-files-found: error

    - name: 'üçè Remove Apple Certificates'
      if: matrix.map.host == 'mac'
      run: security delete-keychain $RUNNER_TEMP/app-signing.keychain-db

  stable-release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: 'ü§å Download artifacts'
      uses: actions/download-artifact@v3

    - name: "‚úèÔ∏è Generate release changelog"
      id: changelog
      uses: mikepenz/release-changelog-builder-action@v3
      with:
        toTag: ${{ github.sha }}
        configuration: '.github/workflows/changelog.json'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 'üî• Create stable release'
      uses: softprops/action-gh-release@v1
      with:
        draft: true
        files: artifact/*
        body: ${{steps.changelog.outputs.changelog}}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 'üßπ Remove artifacts'
      uses: geekyeggo/delete-artifact@v2
      with:
        name: 'openmv-ide-*'
        failOnError: false

  development-release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') == false
    permissions:
      contents: write
    steps:
    - name: 'ü§å Download artifacts'
      uses: actions/download-artifact@v3

    - name: 'üßπ Delete old release'
      uses: dev-drprasad/delete-tag-and-release@v0.2.1
      with:
        delete_release: true
        tag_name: development
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: "‚úèÔ∏è Generate release changelog"
      id: changelog
      uses: mikepenz/release-changelog-builder-action@v3
      with:
        toTag: ${{ github.sha }}
        configuration: '.github/workflows/changelog.json'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 'üî• Create development release'
      uses: softprops/action-gh-release@v1
      with:
        draft: false
        name: Development Release
        tag_name: development
        body: |
            **‚ö†Ô∏è This is a development release, and it may be unstable.**
            ${{steps.changelog.outputs.changelog}}
        files: artifact/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 'üßπ Remove artifacts'
      uses: geekyeggo/delete-artifact@v2
      with:
        name: 'openmv-ide-*'
        failOnError: false
